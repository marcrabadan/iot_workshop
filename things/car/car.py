import asyncio
import os
import time
import json
import random
import threading
import redis
from aiokafka import AIOKafkaProducer, AIOKafkaConsumer
from prometheus_client import start_http_server, Gauge

KAFKA_BOOTSTRAP_SERVERS = os.getenv("KAFKA_BOOTSTRAP_SERVERS")
REDIS_HOST = os.getenv("REDIS_HOST")
REDIS_PORT = 6379
CAR_TOPIC = "telemetry_car"

car_latitude = Gauge('car_latitude', 'Car latitude', ['device'])
car_longitude = Gauge('car_longitude', 'Car longitude', ['device'])
car_speed = Gauge('car_speed', 'Car speed (km/h)', ['device'])
car_battery = Gauge('car_battery', 'Car battery level (%)', ['device'])

geojson = {"type":"FeatureCollection","features":[{"type":"Feature","properties":{"stroke":"#ff1800"},"geometry":{"type":"LineString","coordinates":[[12.63596,55.6302],[12.63799,55.63021],[12.63908,55.63018],[12.63956,55.63015],[12.64084,55.63005],[12.64149,55.63006],[12.6418,55.63006],[12.64197,55.63],[12.64198,55.62996],[12.64203,55.62989],[12.64215,55.6298],[12.64235,55.62974],[12.64253,55.62973],[12.6427,55.62975],[12.6429,55.62983],[12.64303,55.62998],[12.64303,55.63002],[12.64329,55.63018],[12.64359,55.63028],[12.64395,55.63031],[12.64417,55.6303],[12.64578,55.6301],[12.64759,55.62989],[12.64846,55.62983],[12.64936,55.62982],[12.65196,55.62987],[12.65276,55.62991],[12.6537,55.63001],[12.65551,55.63032],[12.65592,55.63041],[12.65599,55.63036],[12.65624,55.6303],[12.65649,55.6303],[12.65674,55.63039],[12.65687,55.63049],[12.6569,55.63057],[12.6568,55.63076],[12.65665,55.63085],[12.65651,55.63089],[12.65638,55.6309],[12.65628,55.63106],[12.65607,55.63163],[12.65595,55.63192],[12.65593,55.63198],[12.65605,55.63202],[12.65618,55.63204],[12.65689,55.63217],[12.65881,55.63257],[12.65982,55.63278],[12.66097,55.63297],[12.6627,55.63317],[12.6635,55.63325],[12.66357,55.63328],[12.66389,55.63329],[12.66431,55.63331],[12.66519,55.63333],[12.66626,55.63332],[12.66738,55.63327],[12.66879,55.63317],[12.6698,55.63306],[12.67085,55.63291],[12.67229,55.63264],[12.67306,55.63247],[12.67398,55.63225],[12.67492,55.63197],[12.67617,55.63156],[12.67758,55.63103],[12.68033,55.62992],[12.68523,55.62791],[12.68887,55.62643],[12.69229,55.62501],[12.70615,55.61931],[12.71262,55.61674],[12.71571,55.61547],[12.72039,55.61355],[12.7256,55.61142],[12.72731,55.61072],[12.72994,55.60967],[12.73305,55.60838],[12.73655,55.60689],[12.74025,55.60525],[12.74322,55.60388],[12.74839,55.60145],[12.75623,55.59777],[12.75913,55.59642],[12.76189,55.59515],[12.76539,55.59357],[12.76896,55.59204],[12.7719,55.59085],[12.77533,55.58952],[12.77826,55.58844],[12.78144,55.58732],[12.78395,55.58646],[12.78728,55.58536],[12.79097,55.58419],[12.79513,55.58294],[12.79896,55.58184],[12.80386,55.58051],[12.80726,55.57963],[12.81037,55.57886],[12.81387,55.57804],[12.81697,55.57734],[12.82682,55.57516],[12.8362,55.57309],[12.84029,55.5722],[12.84259,55.57172],[12.84713,55.57084],[12.85147,55.57005],[12.85623,55.56926],[12.8623,55.56835],[12.86637,55.56781],[12.86897,55.56748],[12.87161,55.56718],[12.87602,55.56671],[12.88138,55.56622],[12.88606,55.56586],[12.89157,55.56552],[12.89604,55.56532],[12.89799,55.56525],[12.90096,55.56522],[12.90269,55.56525],[12.9056,55.56534],[12.9071,55.56541],[12.9093,55.56546],[12.91197,55.56545],[12.91457,55.56542],[12.91724,55.56531],[12.91887,55.56515],[12.92108,55.56484],[12.92206,55.56468],[12.92383,55.56434],[12.92552,55.56395],[12.92781,55.56334],[12.93015,55.56261],[12.93213,55.5619],[12.93434,55.56101],[12.93582,55.56033],[12.93675,55.55987],[12.93838,55.55901],[12.93935,55.55845],[12.94023,55.5579],[12.94151,55.55705],[12.94269,55.5562],[12.94434,55.55501],[12.94552,55.55418],[12.94644,55.55356],[12.94801,55.55262],[12.94985,55.55165],[12.95102,55.55111],[12.95191,55.55073],[12.95193,55.55065],[12.95217,55.55054],[12.95268,55.55028],[12.95282,55.55018],[12.95294,55.55007],[12.95307,55.54988],[12.95308,55.54969],[12.95301,55.54954],[12.95287,55.54942],[12.95269,55.54934],[12.9524,55.54928],[12.95217,55.54927],[12.95189,55.5493],[12.95156,55.54938],[12.95125,55.54954],[12.95109,55.54971],[12.95102,55.5499],[12.95105,55.55012],[12.95116,55.55026],[12.95151,55.55061],[12.95223,55.55135],[12.95259,55.55177],[12.95313,55.5525],[12.95348,55.55305],[12.95407,55.55412],[12.95441,55.55485],[12.95464,55.5554],[12.95472,55.55573],[12.95489,55.55596],[12.95506,55.55602],[12.95529,55.55607],[12.95545,55.55617],[12.95552,55.55628],[12.95552,55.55637],[12.95552,55.55643],[12.95555,55.55662],[12.95566,55.55683],[12.95574,55.55695],[12.95594,55.55711],[12.95604,55.55718],[12.95623,55.55732],[12.95808,55.55864],[12.96085,55.56053],[12.96268,55.56171],[12.963,55.56187],[12.96313,55.5619],[12.96352,55.56185],[12.96375,55.56182],[12.96396,55.56187],[12.96413,55.56195],[12.96422,55.56209],[12.96421,55.5622],[12.96429,55.56232],[12.96449,55.56264],[12.96488,55.56287],[12.96511,55.56299],[12.96676,55.56388],[12.96744,55.5643],[12.9678,55.56455],[12.96823,55.56493],[12.96841,55.56509],[12.96854,55.56522],[12.96863,55.56537],[12.96875,55.56548],[12.96886,55.56555],[12.96903,55.56556],[12.96934,55.56564],[12.96954,55.56579],[12.96959,55.56588],[12.9696,55.56597],[12.96955,55.5661],[12.96939,55.56623],[12.96933,55.56626],[12.96929,55.56628],[12.96918,55.56654],[12.96912,55.56674],[12.96907,55.56715],[12.96902,55.56769],[12.96888,55.56864],[12.96881,55.56921],[12.96881,55.56966],[12.96887,55.57012],[12.96899,55.57052],[12.9692,55.57104],[12.96949,55.57156],[12.96982,55.57205],[12.97003,55.57234],[12.97023,55.57237],[12.97034,55.57242],[12.97041,55.5725],[12.97043,55.57258],[12.9704,55.57265],[12.97044,55.5728],[12.97049,55.573],[12.97052,55.57305],[12.9706,55.57317],[12.97106,55.57384],[12.972,55.57518],[12.97261,55.57599],[12.97303,55.57649],[12.97416,55.5777],[12.97476,55.5783],[12.97523,55.57873],[12.97557,55.57906],[12.97593,55.57942],[12.97613,55.57943],[12.97624,55.57949],[12.97628,55.57956],[12.97627,55.57961],[12.97624,55.57966],[12.97639,55.57974],[12.97721,55.58052],[12.97804,55.58138],[12.97867,55.58205],[12.97936,55.58288],[12.9796,55.58316],[12.97967,55.58318],[12.97979,55.58326],[12.9798,55.58337],[12.97985,55.58352],[12.97996,55.58382],[12.98091,55.58515],[12.98243,55.58768],[12.98325,55.58909],[12.98346,55.58949],[12.98354,55.58971],[12.98357,55.58984],[12.98358,55.59017],[12.98357,55.59051],[12.98362,55.59059],[12.98362,55.591],[12.98364,55.59165],[12.98365,55.59181],[12.98363,55.59228],[12.98355,55.59236],[12.98355,55.59268],[12.98349,55.59343],[12.98348,55.59369],[12.98347,55.59474],[12.98344,55.59591],[12.98338,55.59741],[12.98337,55.59757],[12.98337,55.59784],[12.98341,55.59789],[12.98344,55.59792],[12.98349,55.59854],[12.98351,55.59874],[12.9835,55.59937],[12.98338,55.59972],[12.98302,55.60077],[12.98278,55.6013],[12.98235,55.60229],[12.98223,55.60258],[12.98189,55.60333],[12.98183,55.60344],[12.98187,55.60346],[12.98195,55.60352],[12.98198,55.60359],[12.98195,55.60368],[12.9818,55.60377],[12.98161,55.60379],[12.9815,55.60377],[12.98134,55.60391],[12.98121,55.60393],[12.98112,55.60399],[12.98022,55.6047],[12.98044,55.60481],[12.98058,55.60491],[12.98139,55.60527],[12.98151,55.60528],[12.98236,55.60566],[12.98277,55.60582],[12.98343,55.60599],[12.98381,55.60606],[12.98397,55.60609],[12.98393,55.60618],[12.98363,55.60682],[12.98359,55.60693],[12.98342,55.60729],[12.98323,55.60755],[12.9831,55.60763],[12.98318,55.6081],[12.98329,55.60837],[12.98338,55.60869],[12.98338,55.60888],[12.98334,55.60928],[12.98331,55.60942],[12.98311,55.61009],[12.98306,55.61039],[12.9831,55.61064],[12.98313,55.61066],[12.98322,55.61072],[12.98325,55.61077],[12.98344,55.61088],[12.98373,55.61098],[12.98536,55.61124],[12.98595,55.61137],[12.98668,55.61157],[12.98713,55.61173],[12.98738,55.6118],[12.98742,55.61179],[12.98753,55.61177],[12.98764,55.61177],[12.98779,55.61181],[12.9879,55.61192],[12.9879,55.61195],[12.98814,55.61202],[12.98899,55.61228],[12.98957,55.61239],[12.99067,55.6125],[12.99214,55.61263],[12.9929,55.61267]]}}]}

async def aio_produce_car():
    try:
        producer = AIOKafkaProducer(
            bootstrap_servers=KAFKA_BOOTSTRAP_SERVERS,
            value_serializer=lambda v: json.dumps(v).encode("utf-8")
        )
        await producer.start()
        node_name = os.getenv("NODE_NAME", "car-0")
        
        if node_name != "car-0":
            initial_delay = random.uniform(0.5, 5)
            await asyncio.sleep(initial_delay)
        
        try:
            coords = geojson["features"][0]["geometry"]["coordinates"]
            while True:
                for coord in coords:
                    telemetry = {
                        "device": node_name,
                        "type": "car",
                        "latitude": coord[1],
                        "longitude": coord[0],
                        "speed": round(random.uniform(0, 120), 2), 
                        "battery": round(random.uniform(20, 100), 2)
                    }
                    await producer.send_and_wait(CAR_TOPIC, telemetry)
                    print("Produced car telemetry:", telemetry)
                    await asyncio.sleep(2)
        finally:
            await producer.stop()
    except Exception as e:
        print(f"Error: {e}")
        os._exit(1)

async def aio_consume_car():
    try:
        r = redis.Redis(host=REDIS_HOST, port=REDIS_PORT, decode_responses=True)
        consumer = AIOKafkaConsumer(
            CAR_TOPIC,
            bootstrap_servers=KAFKA_BOOTSTRAP_SERVERS,
            auto_offset_reset="earliest",
            group_id="group_car",
            value_deserializer=lambda m: json.loads(m.decode("utf-8"))
        )
        await consumer.start()
        try:
            async for message in consumer:
                telemetry = message.value
                print("Consumed car telemetry:", telemetry)
                r.hset("car:" + telemetry["device"], mapping=telemetry)
                car_latitude.labels(device=telemetry["device"]).set(telemetry["latitude"])
                car_longitude.labels(device=telemetry["device"]).set(telemetry["longitude"])
                car_speed.labels(device=telemetry["device"]).set(telemetry["speed"])
                car_battery.labels(device=telemetry["device"]).set(telemetry["battery"])
        finally:
            await consumer.stop()
    except Exception as e:
        print(f"Error: {e}")
        os._exit(1)

def consume_car():
    asyncio.run(aio_consume_car())

def produce_car():
    asyncio.run(aio_produce_car())

def start_prometheus():
    start_http_server(8000)
    print("Prometheus metrics available on port 8000")

if __name__ == "__main__":
    import threading
    stop_event = threading.Event()
    threading.Thread(target=start_prometheus, daemon=True).start()
    threading.Thread(target=produce_car, daemon=True).start()
    threading.Thread(target=consume_car, daemon=True).start()
    stop_event.wait()